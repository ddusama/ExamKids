{"ast":null,"code":"import { isChromeDebugger, isJest, isWeb, shouldBeUseWeb } from \"./PlatformChecker\";\nvar IS_NATIVE = !shouldBeUseWeb();\nexport var measure;\nif (isWeb()) {\n  measure = function measure(animatedRef) {\n    var element = animatedRef();\n    var viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = function measure() {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else if (isJest()) {\n  measure = function measure() {\n    console.warn('[Reanimated] measure() cannot be used with Jest.');\n    return null;\n  };\n} else if (IS_NATIVE) {\n  measure = function measure(animatedRef) {\n    'worklet';\n\n    if (!_WORKLET) {\n      return null;\n    }\n    var viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n      return null;\n    }\n    var measured = _IS_FABRIC ? _measureFabric(viewTag) : _measurePaper(viewTag);\n    if (measured === null) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" returned an invalid measurement response.\");\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");\n      return null;\n    } else {\n      return measured;\n    }\n  };\n} else {\n  measure = function measure() {\n    console.warn('[Reanimated] measure() is not supported on this configuration.');\n    return null;\n  };\n}\nexport var dispatchCommand;\nif (IS_NATIVE && global._IS_FABRIC) {\n  dispatchCommand = function dispatchCommand(animatedRef, commandName) {\n    'worklet';\n\n    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (!_WORKLET) {\n      return;\n    }\n    var shadowNodeWrapper = animatedRef();\n    _dispatchCommandFabric(shadowNodeWrapper, commandName, args);\n  };\n} else if (IS_NATIVE) {\n  dispatchCommand = function dispatchCommand(animatedRef, commandName) {\n    'worklet';\n\n    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (!_WORKLET) {\n      return;\n    }\n    var viewTag = animatedRef();\n    _dispatchCommandPaper(viewTag, commandName, args);\n  };\n} else if (isWeb()) {\n  dispatchCommand = function dispatchCommand() {\n    console.warn('[Reanimated] dispatchCommand() is not supported on web.');\n  };\n} else if (isChromeDebugger()) {\n  dispatchCommand = function dispatchCommand() {\n    console.warn('[Reanimated] dispatchCommand() is not supported with Chrome Debugger.');\n  };\n} else if (isJest()) {\n  dispatchCommand = function dispatchCommand() {\n    console.warn('[Reanimated] dispatchCommand() is not supported with Jest.');\n  };\n} else {\n  dispatchCommand = function dispatchCommand() {\n    console.warn('[Reanimated] dispatchCommand() is not supported on this configuration.');\n  };\n}\nexport var scrollTo;\nif (isWeb()) {\n  scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    var element = animatedRef();\n    element.scrollTo({\n      x: x,\n      y: y,\n      animated: animated\n    });\n  };\n} else if (IS_NATIVE && global._IS_FABRIC) {\n  scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n  };\n} else if (IS_NATIVE) {\n  scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    if (!_WORKLET) {\n      return;\n    }\n    var viewTag = animatedRef();\n    _scrollToPaper(viewTag, x, y, animated);\n  };\n} else if (isChromeDebugger()) {\n  scrollTo = function scrollTo() {\n    console.warn('[Reanimated] scrollTo() is not supported with Chrome Debugger.');\n  };\n} else if (isJest()) {\n  scrollTo = function scrollTo() {\n    console.warn('[Reanimated] scrollTo() is not supported with Jest.');\n  };\n} else {\n  scrollTo = function scrollTo() {\n    console.warn('[Reanimated] scrollTo() is not supported on this configuration.');\n  };\n}\nexport var setGestureState;\nif (IS_NATIVE) {\n  setGestureState = function setGestureState(handlerTag, newState) {\n    'worklet';\n\n    if (!_WORKLET) {\n      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n      return;\n    }\n    _setGestureState(handlerTag, newState);\n  };\n} else if (isWeb()) {\n  setGestureState = function setGestureState() {\n    console.warn('[Reanimated] setGestureState() is not available on web.');\n  };\n} else if (isChromeDebugger()) {\n  setGestureState = function setGestureState() {\n    console.warn('[Reanimated] setGestureState() cannot be used with Chrome Debugger.');\n  };\n} else if (isJest()) {\n  setGestureState = function setGestureState() {\n    console.warn('[Reanimated] setGestureState() cannot be used with Jest.');\n  };\n} else {\n  setGestureState = function setGestureState() {\n    console.warn('[Reanimated] setGestureState() is not supported on this configuration.');\n  };\n}","map":{"version":3,"names":["isChromeDebugger","isJest","isWeb","shouldBeUseWeb","IS_NATIVE","measure","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","console","warn","_WORKLET","viewTag","measured","_IS_FABRIC","_measureFabric","_measurePaper","isNaN","dispatchCommand","global","commandName","args","arguments","length","undefined","shadowNodeWrapper","_dispatchCommandFabric","_dispatchCommandPaper","scrollTo","animated","_scrollToPaper","setGestureState","handlerTag","newState","_setGestureState"],"sources":["C:\\Users\\Dani\\ProgramacionMovil\\ExamKids\\frontend\\examkids\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\NativeMethods.ts"],"sourcesContent":["import type { MeasuredDimensions, ShadowNodeWrapper } from './commonTypes';\nimport {\n  isChromeDebugger,\n  isJest,\n  isWeb,\n  shouldBeUseWeb,\n} from './PlatformChecker';\n\nimport type { AnimatedRef } from './hook/commonTypes';\nimport type { Component } from 'react';\n\nconst IS_NATIVE = !shouldBeUseWeb();\n\nexport let measure: <T extends Component>(\n  animatedRef: AnimatedRef<T>\n) => MeasuredDimensions | null;\n\nif (isWeb()) {\n  measure = (animatedRef) => {\n    const element = (animatedRef as any)() as HTMLElement; // TODO: fix typing of animated refs on web\n    const viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top,\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = () => {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else if (isJest()) {\n  measure = () => {\n    console.warn('[Reanimated] measure() cannot be used with Jest.');\n    return null;\n  };\n} else if (IS_NATIVE) {\n  measure = (animatedRef) => {\n    'worklet';\n    if (!_WORKLET) {\n      return null;\n    }\n\n    const viewTag = (animatedRef as any)();\n    if (viewTag === -1) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    }\n\n    const measured = _IS_FABRIC\n      ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        _measureFabric!(viewTag as ShadowNodeWrapper)\n      : // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        _measurePaper!(viewTag as number);\n    if (measured === null) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`\n      );\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`\n      );\n      return null;\n    } else {\n      return measured;\n    }\n  };\n} else {\n  measure = () => {\n    console.warn(\n      '[Reanimated] measure() is not supported on this configuration.'\n    );\n    return null;\n  };\n}\n\nexport let dispatchCommand: <T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  commandName: string,\n  args?: Array<unknown>\n) => void;\n\nif (IS_NATIVE && global._IS_FABRIC) {\n  dispatchCommand = (animatedRef, commandName, args = []) => {\n    'worklet';\n    if (!_WORKLET) {\n      return;\n    }\n\n    const shadowNodeWrapper = animatedRef() as ShadowNodeWrapper;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _dispatchCommandFabric!(shadowNodeWrapper, commandName, args);\n  };\n} else if (IS_NATIVE) {\n  dispatchCommand = (animatedRef, commandName, args = []) => {\n    'worklet';\n    if (!_WORKLET) {\n      return;\n    }\n\n    const viewTag = animatedRef() as number;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _dispatchCommandPaper!(viewTag, commandName, args);\n  };\n} else if (isWeb()) {\n  dispatchCommand = () => {\n    console.warn('[Reanimated] dispatchCommand() is not supported on web.');\n  };\n} else if (isChromeDebugger()) {\n  dispatchCommand = () => {\n    console.warn(\n      '[Reanimated] dispatchCommand() is not supported with Chrome Debugger.'\n    );\n  };\n} else if (isJest()) {\n  dispatchCommand = () => {\n    console.warn('[Reanimated] dispatchCommand() is not supported with Jest.');\n  };\n} else {\n  dispatchCommand = () => {\n    console.warn(\n      '[Reanimated] dispatchCommand() is not supported on this configuration.'\n    );\n  };\n}\n\nexport let scrollTo: <T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  x: number,\n  y: number,\n  animated: boolean\n) => void;\n\nif (isWeb()) {\n  scrollTo = (animatedRef, x, y, animated) => {\n    'worklet';\n    const element = (animatedRef as any)() as HTMLElement; // TODO: fix typing of animated refs on web\n    // @ts-ignore same call as in react-native-web\n    element.scrollTo({ x, y, animated });\n  };\n} else if (IS_NATIVE && global._IS_FABRIC) {\n  scrollTo = (animatedRef, x, y, animated) => {\n    'worklet';\n    dispatchCommand(animatedRef as any, 'scrollTo', [x, y, animated]);\n  };\n} else if (IS_NATIVE) {\n  scrollTo = (animatedRef, x, y, animated) => {\n    'worklet';\n    if (!_WORKLET) {\n      return;\n    }\n\n    // Calling animatedRef on Paper returns a number (nativeTag)\n    const viewTag = (animatedRef as any)() as number;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _scrollToPaper!(viewTag, x, y, animated);\n  };\n} else if (isChromeDebugger()) {\n  scrollTo = () => {\n    console.warn(\n      '[Reanimated] scrollTo() is not supported with Chrome Debugger.'\n    );\n  };\n} else if (isJest()) {\n  scrollTo = () => {\n    console.warn('[Reanimated] scrollTo() is not supported with Jest.');\n  };\n} else {\n  scrollTo = () => {\n    console.warn(\n      '[Reanimated] scrollTo() is not supported on this configuration.'\n    );\n  };\n}\n\nexport let setGestureState: (handlerTag: number, newState: number) => void;\n\nif (IS_NATIVE) {\n  setGestureState = (handlerTag, newState) => {\n    'worklet';\n    if (!_WORKLET) {\n      console.warn(\n        '[Reanimated] You can not use setGestureState in non-worklet function.'\n      );\n      return;\n    }\n    _setGestureState(handlerTag, newState);\n  };\n} else if (isWeb()) {\n  setGestureState = () => {\n    console.warn('[Reanimated] setGestureState() is not available on web.');\n  };\n} else if (isChromeDebugger()) {\n  setGestureState = () => {\n    console.warn(\n      '[Reanimated] setGestureState() cannot be used with Chrome Debugger.'\n    );\n  };\n} else if (isJest()) {\n  setGestureState = () => {\n    console.warn('[Reanimated] setGestureState() cannot be used with Jest.');\n  };\n} else {\n  setGestureState = () => {\n    console.warn(\n      '[Reanimated] setGestureState() is not supported on this configuration.'\n    );\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}