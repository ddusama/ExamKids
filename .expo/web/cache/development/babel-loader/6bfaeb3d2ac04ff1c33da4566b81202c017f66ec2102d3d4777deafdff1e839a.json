{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { processColor } from \"./Colors\";\nimport { makeShareable } from \"./core\";\nimport { _updatePropsJS } from \"./js-reanimated\";\nimport { shouldBeUseWeb } from \"./PlatformChecker\";\nimport { runOnUIImmediately } from \"./threads\";\nvar colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nexport var ColorProperties = makeShareable(colorProps);\nvar updateProps;\nif (shouldBeUseWeb()) {\n  updateProps = function updateProps(_, updates, maybeViewRef) {\n    'worklet';\n\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach(function (item, _) {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  updateProps = function updateProps(viewDescriptors, updates) {\n    'worklet';\n\n    for (var key in updates) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    }\n    global.UpdatePropsManager.update(viewDescriptors, updates);\n  };\n}\nexport var updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) {\n  adapters.forEach(function (adapter) {\n    adapter(updates);\n  });\n  animatedStyle.current.value = _objectSpread(_objectSpread({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;\nvar createUpdatePropsManager = global._IS_FABRIC ? function () {\n  'worklet';\n  var operations = [];\n  return {\n    update: function update(viewDescriptors, updates) {\n      var _this = this;\n      viewDescriptors.value.forEach(function (viewDescriptor) {\n        operations.push({\n          shadowNodeWrapper: viewDescriptor.shadowNodeWrapper,\n          updates: updates\n        });\n        if (operations.length === 1) {\n          queueMicrotask(_this.flush);\n        }\n      });\n    },\n    flush: function flush() {\n      _updatePropsFabric(operations);\n      operations.length = 0;\n    }\n  };\n} : function () {\n  'worklet';\n  var operations = [];\n  return {\n    update: function update(viewDescriptors, updates) {\n      var _this2 = this;\n      viewDescriptors.value.forEach(function (viewDescriptor) {\n        operations.push({\n          tag: viewDescriptor.tag,\n          name: viewDescriptor.name || 'RCTView',\n          updates: updates\n        });\n        if (operations.length === 1) {\n          queueMicrotask(_this2.flush);\n        }\n      });\n    },\n    flush: function flush() {\n      _updatePropsPaper(operations);\n      operations.length = 0;\n    }\n  };\n};\nrunOnUIImmediately(function () {\n  'worklet';\n\n  global.UpdatePropsManager = createUpdatePropsManager();\n})();","map":{"version":3,"names":["processColor","makeShareable","_updatePropsJS","shouldBeUseWeb","runOnUIImmediately","colorProps","ColorProperties","updateProps","_","updates","maybeViewRef","items","forEach","item","viewDescriptors","key","indexOf","global","UpdatePropsManager","update","updatePropsJestWrapper","animatedStyle","adapters","adapter","current","value","_objectSpread","createUpdatePropsManager","_IS_FABRIC","operations","_this","viewDescriptor","push","shadowNodeWrapper","length","queueMicrotask","flush","_updatePropsFabric","_this2","tag","name","_updatePropsPaper"],"sources":["C:\\Users\\Dani\\ProgramacionMovil\\ExamKids\\frontend\\examkids\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\UpdateProps.ts"],"sourcesContent":["import type { MutableRefObject } from 'react';\nimport { processColor } from './Colors';\nimport type { ShadowNodeWrapper, SharedValue, StyleProps } from './commonTypes';\nimport type { AnimatedStyle } from './helperTypes';\nimport { makeShareable } from './core';\nimport type { Descriptor } from './hook/commonTypes';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport type { ViewRefSet } from './ViewDescriptorsSet';\nimport { runOnUIImmediately } from './threads';\n\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nconst colorProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderColor',\n  'borderLeftColor',\n  'borderRightColor',\n  'borderTopColor',\n  'borderStartColor',\n  'borderEndColor',\n  'color',\n  'shadowColor',\n  'textDecorationColor',\n  'tintColor',\n  'textShadowColor',\n  'overlayColor',\n];\n\nexport const ColorProperties = makeShareable(colorProps);\n\nlet updateProps: (\n  viewDescriptor: SharedValue<Descriptor[]>,\n  updates: StyleProps | AnimatedStyle<any>,\n  maybeViewRef: ViewRefSet<any> | undefined\n) => void;\n\nif (shouldBeUseWeb()) {\n  updateProps = (_, updates, maybeViewRef) => {\n    'worklet';\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach((item, _) => {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  updateProps = (viewDescriptors, updates) => {\n    'worklet';\n    for (const key in updates) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    global.UpdatePropsManager!.update(viewDescriptors, updates);\n  };\n}\n\nexport const updatePropsJestWrapper = (\n  viewDescriptors: SharedValue<Descriptor[]>,\n  updates: AnimatedStyle<any>,\n  maybeViewRef: ViewRefSet<any> | undefined,\n  animatedStyle: MutableRefObject<AnimatedStyle<any>>,\n  adapters: ((updates: AnimatedStyle<any>) => void)[]\n): void => {\n  adapters.forEach((adapter) => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\n\nexport default updateProps;\n\nconst createUpdatePropsManager = global._IS_FABRIC\n  ? () => {\n      'worklet';\n      // Fabric\n      const operations: {\n        shadowNodeWrapper: ShadowNodeWrapper;\n        updates: StyleProps | AnimatedStyle<any>;\n      }[] = [];\n      return {\n        update(\n          viewDescriptors: SharedValue<Descriptor[]>,\n          updates: StyleProps | AnimatedStyle<any>\n        ) {\n          viewDescriptors.value.forEach((viewDescriptor) => {\n            operations.push({\n              shadowNodeWrapper: viewDescriptor.shadowNodeWrapper,\n              updates,\n            });\n            if (operations.length === 1) {\n              queueMicrotask(this.flush);\n            }\n          });\n        },\n        flush() {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          _updatePropsFabric!(operations);\n          operations.length = 0;\n        },\n      };\n    }\n  : () => {\n      'worklet';\n      // Paper\n      const operations: {\n        tag: number;\n        name: string;\n        updates: StyleProps | AnimatedStyle<any>;\n      }[] = [];\n      return {\n        update(\n          viewDescriptors: SharedValue<Descriptor[]>,\n          updates: StyleProps | AnimatedStyle<any>\n        ) {\n          viewDescriptors.value.forEach((viewDescriptor) => {\n            operations.push({\n              tag: viewDescriptor.tag,\n              name: viewDescriptor.name || 'RCTView',\n              updates,\n            });\n            if (operations.length === 1) {\n              queueMicrotask(this.flush);\n            }\n          });\n        },\n        flush() {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          _updatePropsPaper!(operations);\n          operations.length = 0;\n        },\n      };\n    };\n\nrunOnUIImmediately(() => {\n  'worklet';\n  global.UpdatePropsManager = createUpdatePropsManager();\n})();\n\nexport interface UpdatePropsManager {\n  update(\n    viewDescriptors: SharedValue<Descriptor[]>,\n    updates: StyleProps | AnimatedStyle<any>\n  ): void;\n  flush(): void;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}